Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)

Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)

EDITTING / UPDATING TABLES 
This code changes holly ID to 1020  and edits her age and gender 
update EmployeeDemographics1
set EmployeeID = 1020
Set Age = 38, Gender = 'Female'
where firstname = 'Holly' and LastName = 'Flax' 

DELETING ROWS 
Delete From EmployeeDemographics1 
where EmployeeID = 1006

 
UPDATING DATA

SELECT* 
fROM EmployeeDemographics1
UPDATE EmployeeDemographics1 
SET EmployeeID = 1012 WHERE FIRSTNAME = 'HOLLY' 

NEW KEYS = 'UPDATE' AND 'SET' 

EXAMPLE 2 - MULTIPLE CHANGES AT ONCE - use a comma 
SELECT* 
fROM EmployeeDemographics1
UPDATE EmployeeDemographics1 
SET AGE = 31, Gender = 'FEMALE' WHERE FIRSTNAME = 'HOLLY' 

DELETING DATA - ALways be careful because you cannot undo this

Delete from EmployeeDemographics1
Where EmployeeID = 1005  

                                      MERGING TABLES TOGETHER

INNER JOIN CODE       - shows all data common in both tables 
SELECT * 
fROM [SQL tutorial].dbo.EmployeeDemographics1       - select first table 
INNER JOIN  [SQL tutorial].dbo.EmployeeSalary       - join table 2 
ON EmployeeDemographics1.EmployeeID = EmployeeSalary.EmployeeID       - enter command to join on common coloumn used in both tables 

FULL OUTER JOIN    - shows all data points from both tables including non common data 
SELECT * 
fROM [SQL tutorial].dbo.EmployeeDemographics1
Full outer JOIN  [SQL tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics1.EmployeeID = EmployeeSalary.EmployeeID

LEFT OUTER JOIN   - Shows all data from the left table and anything else overlapping both tables 
SELECT * 
fROM [SQL tutorial].dbo.EmployeeDemographics1
left outer JOIN  [SQL tutorial].dbo.EmployeeSalary 
ON EmployeeDemographics1.EmployeeID = EmployeeSalary.EmployeeID

RIGHT OUTER JOIN        - makes table 2 the main table in the results 
 SELECT * 
fROM EmployeeDemographics1
Right outer JOIN EmployeeSalary 
ON EmployeeDemographics1.EmployeeID = EmployeeSalary.EmployeeID
 

      CREATING TEMP TABLES 
CREATE TABLE #TEMP_EMPLOYEE (EmployeeID int, 
JobTitle Varchar(100),
Salary int)

  WE CAN INSERT A TABLE INTO A TEMP TABLE AND THEN USE THAT FOR EDITING AND ANALYSING OR WE CAN A SUBSECTION OF A TABLE INTO A TEMP TABLE - this makes it much quicker 
  so we dont need to repeatedly add joins and mutiple table names when scripting
 
 Example: 
INSERT INTO #TEMP_EMPLOYEE  
SELECT* 
FROM EmployeeSalary

MAIN EXAMPLE:

insert into #TEMP_EMPLOYEE2  
SELECT JobTitle, COUNT(JobTitle), Avg(Age), AVG(Salary)
FROM EmployeeDemographics1 AS DEMO
JOIN EmployeeSalary AS SAL
ON DEMO.EmployeeID = SAL.EMPLOYEEID
Group by JobTitle
                                         THIS produces a table with jobtitle, count, average salarty and age, merging 2 tables. the results from this can now be the 
                                         new temp table                               
Select * 
From #TEMP_EMPLOYEE2
